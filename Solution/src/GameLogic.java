//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Untitled
//  @ File Name : GameLogic.java
//  @ Date : 2019.03.20.
//  @ Author : 
//
//


import java.util.ArrayList;

/**
 * Az osztaly amely a jatek motorjat kepezi, inicializalja a jatekot,
 * illetve az allatok lepteteset es a targyak uzemelteteset vegzi.
 * @author Konczos
 */


public class GameLogic{
    /**
     * A jatekos megszerzett pointjait tarolo int.
     */
    private int points;
    /**
     * A program futasat jelzo boolean.
     */
    private boolean running = false;
    /**
     * A mapen levo pandakat tarolo lista.
     */
    private ArrayList<Animal> animalsOnTheMap;
    /**
     * A mapen levo speciális funkcioalitassal ellatott targyakat tarolo lista.
     */
    private ArrayList<Item> itemsOnTheMap;
    /**
     * A mapen levo szekrenyeket tarolo lista.
     */
    private ArrayList<EntryWardrobe> tilesOnMap;

    /**
     * A fuggveny a jatek inicializalasat vegzi.
     */
    public void initGame(){
        GameLogic.indent(true);
        System.out.println(">   GameLogic::initGame()");

        GameLogic.indent(false);
        System.out.println("<   GameLogic::initGame()");
        running = true;
        return;
    }

    /**
     * A jatek idoziteset elvegzo fuggveny.
     */
    public void game() {
        GameLogic.indent(true);
        System.out.println(">   GameLogic::game()");

        long lastTime = System.nanoTime(); //utolsó mentett rendszeridő nanoszekundumban
        final double amountOfTicks = 2D; //hány ticket akarunk másodpercenként --> 2 tick másodpercenként
        double nanoSec = 1000000000 / amountOfTicks; //hány nanoszekudumonként kell tickelni
        double delta = 0;

        while(running){
            long now =  System.nanoTime(); //aktuális rendszeridő nanoszekundumban
            delta += (now - lastTime) / nanoSec;
            lastTime = now;
            if (delta >= 1){
                tick(); //az állatok és tárgyak léptetése/üzemeltetése
                delta--;
            }

        }

        GameLogic.indent(false);
        System.out.println("<   GameLogic::game()");
        return;
    }

    /**
     * A fuggveny szamolja a jatekos altal a kijaraton atjuttatott pandakat
     * es ez alapjan noveli a pontszamlalot.
     */
    public void addPoints(int p) {
        GameLogic.indent(true);
        System.out.println(">   GameLogic::addPoints(int p)");

        points += (p * 50);

        GameLogic.indent(false);
        System.out.println("<   GameLogic::addPoints(int p)");
        return;
    }

    /**
     * A fuggveny befejezi a jatekot es kilep belole.
     */
    public void endGame() {
        GameLogic.indent(true);
        System.out.println(">   GameLogic::endGame()");

        if(animalsOnTheMap.isEmpty()) {
          //  System.out.println("You caugth all pandas!");
          //  System.out.println("You caugt:" + points + " pandas!");
        }else{
            // System.out.println("You Lost!");
        }

        GameLogic.indent(false);
        System.out.println("<   GameLogic::endGame()");
        // System.exit(0);
        return;
    }

    /**
     * A fuggveny az allatok lepteteset es targyak üzemeltetest latja el.
     */
    public void tick() {
        GameLogic.indent(true);
        System.out.println(">   GameLogic::tick()");

        for(int i = 0; i != animalsOnTheMap.size(); ++i){
            animalsOnTheMap.get(i).move();
        }

        for(int j = 0; j != itemsOnTheMap.size(); ++j){
            itemsOnTheMap.get(j).countDown();
        }

        GameLogic.indent(false);
        System.out.println("<   GameLogic::tick()");
        return;
    }

    /**
     * Eltavolitja a halott allatot.
     */
    public void remove(Animal a){
        GameLogic.indent(true);
        System.out.println(">   GameLogic::remove(Animal a)");

        animalsOnTheMap.remove(a);
        a = null;

        GameLogic.indent(false);
        System.out.println("<   GameLogic::remove(Animal a)");
        return;
    }

    public void addAnimal(Animal a) {
        GameLogic.indent(true);
        System.out.println(">   GameLogic::addAnimal(Animal a)");

        animalsOnTheMap.add(a);

        GameLogic.indent(false);
        System.out.println("<   GameLogic::addAnimal(Animal a)");
        return;
    }

    public GameLogic() {
        points = 0;
        animalsOnTheMap = new ArrayList<>();
        tilesOnMap = new ArrayList<>();
        itemsOnTheMap = new ArrayList<>();
    }

    private static int tabCounter = 0;
    private static void writeTabs() {
        for (int i = 0; i < tabCounter; i++) {
            System.out.print("\t");
        }
        return;
    }
    public static void indent(boolean deeper) {
        if (!deeper)
            tabCounter--;

        writeTabs();

        if (deeper)
            tabCounter++;

        return;
    }

}
