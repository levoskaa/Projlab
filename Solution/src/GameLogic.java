//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Untitled
//  @ File Name : GameLogic.java
//  @ Date : 2019.03.20.
//  @ Author : 
//
//


import java.util.ArrayList;

/**
 * Az osztaly amely a jatek motorjat kepezi, inicializalja a jatekot,
 * illetve az allatok lepteteset es a targyak uzemelteteset vegzi.
 * @author Konczos
 */


public class GameLogic{
    /**
     * A jatekos megszerzett pointjait tarolo int.
     */
    private int Points;
    /**
     * A program futasat jelzo boolean.
     */
    private boolean running = false;
    /**
     * A mapen levo pandakat tarolo lista.
     */
    private ArrayList<Animal> AnimalsOnTheMap;
    /**
     * A mapen levo speciális funkcioalitassal ellatott targyakat tarolo lista.
     */
    private ArrayList<Item> ItemsOnTheMap;
    /**
     * A mapen levo szekrenyeket tarolo lista.
     */
    private ArrayList<EntryWardrobe> TilesOnMap;

    /**
     * A fuggveny a jatek inicializalasat vegzi.
     */
    public void initGame(){
        running = true;
    }

    /**
     * A jatek idoziteset elvegzo fuggveny.
     */
    public void game() {
        long lastTime = System.nanoTime(); //utolsó mentett rendszeridő nanoszekundumban
        final double amountOfTicks = 2D; //hány ticket akarunk másodpercenként --> 2 tick másodpercenként
        double nanoSec = 1000000000 / amountOfTicks; //hány nanoszekudumonként kell tickelni
        double delta = 0;

        while(running){
            long now =  System.nanoTime(); //aktuális rendszeridő nanoszekundumban
            delta += (now - lastTime) / nanoSec;
            lastTime = now;
            if (delta >= 1){
                tick(); //az állatok és tárgyak léptetése/üzemeltetése
                delta--;
            }

        }

    }

    /**
     * A fuggveny szamolja a jatekos altal a kijaraton atjuttatott pandakat
     * es ez alapjan noveli a pontszamlalot.
     */
    public void addPoints(int p) {
        Points += (p * 50);
    }

    /**
     * A fuggveny befejezi a jatekot es kilep belole.
     */
    public void endGame() {
        if(AnimalsOnTheMap.isEmpty()) { //játék végetérésének okának ellenőrzése
            System.out.println("You caugth all pandas!\n"); //ha a játékos az össszes pandát kivezette a plázából győzött
            System.out.println("You caugt:" + Points + "pandas!");
        }else{
            System.out.println("You Lost!"); //ha az orángután meghalt a játékos vesztett
        }

        System.exit(0);
    }

    /**
     * A fuggveny az allatok lepteteset es targyak üzemeltetest latja el.
     */
    public void tick() {

        for(int i = 0; i != AnimalsOnTheMap.size(); ++i){
        AnimalsOnTheMap.get(i).move();
        }

        for(int j = 0; j != ItemsOnTheMap.size(); ++j){
        ItemsOnTheMap.get(j).countDown();
        }
    }

    /**
     * Eltavolitja a halott allatot.
     */
    public void remove(Animal a){
        a = null;
    }

    // egy getStartingTile(): Tile fuggveny kene, hogy az ExitPoint class tudja, hogy
    // hova kell vinnie az Orangutant, miutan ralepett a kilepesi pontra

    // az addPoints fuggvenynek lehetne egy int bemenete
    // amit az ExitPoint tud hasznalni, igy az egybol megadja, mennyi pont kell
}
